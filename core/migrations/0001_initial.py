# Generated by Django 5.1.7 on 2025-10-26 23:11

import django.contrib.auth.models
import django.contrib.auth.validators
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Congresso',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('status', models.CharField(default='draft', max_length=255)),
                ('sort', models.IntegerField(blank=True, null=True)),
                ('user_created', models.UUIDField(blank=True, null=True)),
                ('date_created', models.DateTimeField(auto_now_add=True, null=True)),
                ('user_updated', models.UUIDField(blank=True, null=True)),
                ('date_updated', models.DateTimeField(auto_now=True, null=True)),
                ('nome', models.CharField(blank=True, max_length=255, null=True, verbose_name='Nome do Congresso')),
                ('feira', models.IntegerField(blank=True, null=True, verbose_name='ID da Feira')),
                ('id_feira', models.IntegerField(blank=True, null=True, verbose_name='ID Feira (duplicado)')),
                ('Periodo', models.CharField(blank=True, max_length=255, null=True, verbose_name='Período')),
                ('palestrantes', models.TextField(blank=True, null=True)),
                ('diferencial', models.TextField(blank=True, null=True)),
                ('ingresso_black_valor', models.TextField(blank=True, null=True, verbose_name='Ingresso Black - Valor')),
                ('ingresso_black_link', models.CharField(blank=True, max_length=255, null=True, verbose_name='Ingresso Black - Link')),
                ('ingresso_black_lote', models.CharField(blank=True, max_length=255, null=True, verbose_name='Ingresso Black - Lote')),
                ('ingresso_black_status', models.CharField(blank=True, max_length=255, null=True, verbose_name='Ingresso Black - Status')),
                ('ingresso_experience_valor', models.CharField(blank=True, max_length=255, null=True, verbose_name='Ingresso Experience - Valor')),
                ('ingresso_experience_link', models.CharField(blank=True, max_length=255, null=True, verbose_name='Ingresso Experience - Link')),
                ('ingresso_experience_lote', models.CharField(blank=True, max_length=255, null=True, verbose_name='Ingresso Experience - Lote')),
                ('ingresso_experience_status', models.CharField(blank=True, max_length=255, null=True, verbose_name='Ingresso Experience - Status')),
                ('tag_chatwoot', models.CharField(blank=True, max_length=255, null=True)),
                ('chatwoot', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'verbose_name': 'Congresso',
                'verbose_name_plural': 'Congressos',
                'db_table': 'congressos',
                'ordering': ['nome'],
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Feira',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('status', models.CharField(default='draft', max_length=255)),
                ('sort', models.IntegerField(blank=True, null=True)),
                ('user_created', models.UUIDField(blank=True, null=True)),
                ('date_created', models.DateTimeField(auto_now_add=True, null=True)),
                ('user_updated', models.UUIDField(blank=True, null=True)),
                ('date_updated', models.DateTimeField(auto_now=True, null=True)),
                ('nome', models.CharField(blank=True, max_length=255, null=True, verbose_name='Nome da Feira')),
                ('periodo', models.TextField(blank=True, null=True, verbose_name='Período')),
                ('publico_alvo', models.CharField(blank=True, max_length=255, null=True, verbose_name='Público Alvo')),
                ('credenciamento', models.TextField(blank=True, null=True)),
                ('local', models.CharField(blank=True, max_length=255, null=True)),
                ('diferencial', models.CharField(blank=True, max_length=255, null=True)),
                ('Observacoes', models.TextField(blank=True, null=True, verbose_name='Observações')),
                ('desconto_nivel_1', models.CharField(blank=True, max_length=255, null=True, verbose_name='Desconto Nível 1')),
                ('desconto_nivel_2', models.CharField(blank=True, max_length=255, null=True, verbose_name='Desconto Nível 2')),
                ('desconto_cupom_1', models.CharField(blank=True, max_length=255, null=True, verbose_name='Desconto Cupom 1')),
                ('desconto_cupom_2', models.CharField(blank=True, max_length=255, null=True, verbose_name='Desconto Cupom 2')),
                ('ingresso_black', models.TextField(blank=True, null=True, verbose_name='Ingresso Black')),
                ('ingresso_experience', models.TextField(blank=True, null=True, verbose_name='Ingresso Experience')),
                ('lista_congressos', models.TextField(blank=True, null=True)),
                ('Infraestrutura_e_servicos', models.TextField(blank=True, null=True, verbose_name='Infraestrutura e Serviços')),
                ('Oportunidades_de_negocio', models.TextField(blank=True, null=True, verbose_name='Oportunidades de Negócio')),
                ('Gatilhos_de_urgencia', models.TextField(blank=True, null=True, verbose_name='Gatilhos de Urgência')),
                ('credenciamento_categorias', models.TextField(blank=True, null=True)),
                ('link_expositores', models.CharField(blank=True, max_length=255, null=True)),
                ('link_embaixadores', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'verbose_name': 'Feira',
                'verbose_name_plural': 'Feiras',
                'db_table': 'feiras',
                'ordering': ['nome'],
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Usuario',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('nivel', models.CharField(choices=[('admin', 'Administrador'), ('gestor', 'Gestor'), ('diretor', 'Diretor')], default='analista', max_length=20)),
                ('is_superuser', models.BooleanField(default=False)),
                ('last_name', models.CharField(blank=True, max_length=150)),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now)),
                ('telefone', models.CharField(blank=True, max_length=20, null=True)),
                ('centro_custo', models.CharField(blank=True, help_text='Centro de custo do usuário', max_length=20, null=True)),
                ('unidade_negocio', models.CharField(blank=True, help_text='Unidade de negócio', max_length=50, null=True)),
            ],
            options={
                'verbose_name': 'Usuário',
                'verbose_name_plural': 'Usuários',
                'db_table': 'usuarios',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
